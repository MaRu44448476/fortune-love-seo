// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isPremium     Boolean   @default(false)
  premiumUntil  DateTime?

  accounts        Account[]
  sessions        Session[]
  userProfile     UserProfile?
  fortuneHistory  FortuneHistory[]
  weeklyFortune   WeeklyFortune[]
  subscriptions   Subscription[]
}

model UserProfile {
  id          String @id @default(cuid())
  userId      String @unique
  bloodType   String? // A, B, O, AB
  zodiac      String? // 星座
  animal      String? // 干支
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FortuneHistory {
  id         String   @id @default(cuid())
  userId     String
  bloodType  String
  zodiac     String
  animal     String
  date       DateTime
  score      Int
  luckyColor String
  luckyItem  String
  advice     String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model WeeklyFortune {
  id            String   @id @default(cuid())
  userId        String
  bloodType     String
  zodiac        String
  animal        String
  weekStart     DateTime // 月曜日の日付
  overallScore  Int      // 週間総合運
  loveScore     Int      // 恋愛運
  workScore     Int      // 仕事運
  healthScore   Int      // 健康運
  moneyScore    Int      // 金運
  dailyAdvice   Json     // 日ごとのアドバイス (月〜日の7日分)
  weeklyAdvice  String   // 週間総合アドバイス
  luckyDays     Json     // ラッキーデー配列
  unluckyDays   Json     // 注意日配列
  compatibility Json     // 相性の良い属性
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart])
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  stripeCustomerId String?   @unique
  stripePriceId    String
  stripeSubId      String?   @unique
  currentPeriodEnd DateTime?
  status           String    // active, canceled, past_due, unpaid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
